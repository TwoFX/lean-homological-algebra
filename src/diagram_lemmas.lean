/-
Copyright (c) 2020 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/

import category_theory.category
import abelian
import exact
import hom_to_mathlib
import pseudoelements
import tactic.diagram_chase

open category_theory
open category_theory.limits
open category_theory.abelian
open category_theory.abelian.pseudoelements

local attribute [instance] object_to_sort
local attribute [instance] hom_to_fun

universes v u
section
variables {V : Type u} [ùí± : category.{v} V] [abelian.{v} V]
include ùí±

section four
variables {A B C D A' B' C' D' : V}
variables {f : A ‚ü∂ B} {g : B ‚ü∂ C} {h : C ‚ü∂ D}
variables {f' : A' ‚ü∂ B'} {g' : B' ‚ü∂ C'} {h' : C' ‚ü∂ D'}
variables {Œ± : A ‚ü∂ A'} {Œ≤ : B ‚ü∂ B'} {Œ≥ : C ‚ü∂ C'} {Œ¥ : D ‚ü∂ D'}
variables (fg : exact f g) (gh : exact g h) (fg' : exact f' g') (gh' : exact g' h')
variables (comm‚ÇÅ : Œ± ‚â´ f' = f ‚â´ Œ≤) (comm‚ÇÇ : Œ≤ ‚â´ g' = g ‚â´ Œ≥) (comm‚ÇÉ : Œ≥ ‚â´ h' = h ‚â´ Œ¥)
include fg gh fg' gh' comm‚ÇÅ comm‚ÇÇ comm‚ÇÉ

lemma four (hŒ± : epi Œ±) (hŒ≤ : mono Œ≤) (hŒ¥ : mono Œ¥) : mono Œ≥ :=
mono_of_zero_of_map_zero _ $ assume (c : C) (hc : Œ≥ c = 0), show c = 0, from

  have h c = 0, from
    suffices Œ¥ (h c) = 0, from zero_of_map_zero _ (pseudo_injective_of_mono _) _ this,
    calc Œ¥ (h c) = h' (Œ≥ c) : by rw [‚Üêcomp_apply, ‚Üêcomm‚ÇÉ, comp_apply]
             ... = h' 0     : by rw hc
             ... = 0        : apply_zero _,

  exists.elim ((pseudo_exact_of_exact gh).2 _ this) $ assume (b : B) (hb : g b = c),
    have g' (Œ≤ b) = 0, from
      calc g' (Œ≤ b) = Œ≥ (g b) : by rw [‚Üêcomp_apply, comm‚ÇÇ, comp_apply]
                ... = Œ≥ c     : by rw hb
                ... = 0       : hc,

    exists.elim ((pseudo_exact_of_exact fg').2 _ this) $ assume (a' : A') (ha' : f' a' = Œ≤ b),
      exists.elim (pseudo_surjective_of_epi Œ± a') $ assume (a : A) (ha : Œ± a = a'),

      have f a = b, from
        suffices Œ≤ (f a) = Œ≤ b, from pseudo_injective_of_mono _ this,
        calc Œ≤ (f a) = f' (Œ± a) : by rw [‚Üêcomp_apply, ‚Üêcomm‚ÇÅ, comp_apply]
                 ... = f' a'    : by rw ha
                 ... = Œ≤ b      : ha',

      calc c = g b     : hb.symm
         ... = g (f a) : by rw this
         ... = 0       : (pseudo_exact_of_exact fg).1 _

lemma four' [epi Œ±] [mono Œ≤] [mono Œ¥] : mono Œ≥ :=
mono_of_zero_of_map_zero _ $ Œª c hc,
begin
  chase c using [g, Œ≤, f', Œ±] with b b' a' a,
  have : f a = b, by commutativity,
  commutativity
end

end four

section kernels
variables {P Q R P' Q' R' : V}
variables {f : P ‚ü∂ Q} {g : Q ‚ü∂ R} {f' : P' ‚ü∂ Q'} {g' : Q' ‚ü∂ R'}
variables {Œ± : P ‚ü∂ P'} {Œ≤ : Q ‚ü∂ Q'} {Œ≥ : R ‚ü∂ R'}
variables (comm‚ÇÅ : Œ± ‚â´ f' = f ‚â´ Œ≤) (comm‚ÇÇ : Œ≤ ‚â´ g' = g ‚â´ Œ≥)
variables (fg : exact f g) (fg' : exact f' g')
variables [mono f']

include comm‚ÇÅ comm‚ÇÇ fg fg'

lemma kernels' : ‚àÉ! (u : kernel Œ± ‚ü∂ kernel Œ≤) (v : kernel Œ≤ ‚ü∂ kernel Œ≥),
  (kernel.Œπ Œ± ‚â´ f = u ‚â´ kernel.Œπ Œ≤) ‚àß (kernel.Œπ Œ≤ ‚â´ g = v ‚â´ kernel.Œπ Œ≥)
  ‚àß exact u v :=
begin
  obtain ‚ü®u, hu‚ÇÅ, hu‚ÇÇ‚ü© := kernel.lift'' Œ≤ (kernel.Œπ Œ± ‚â´ f) (begin
    rw category.assoc, rw ‚Üêcomm‚ÇÅ, rw ‚Üêcategory.assoc,
    rw kernel.condition, rw has_zero_morphisms.zero_comp,
  end),
  obtain ‚ü®v, hv‚ÇÅ, hv‚ÇÇ‚ü© := kernel.lift'' Œ≥ (kernel.Œπ Œ≤ ‚â´ g) (begin
    rw category.assoc, rw ‚Üêcomm‚ÇÇ, rw ‚Üêcategory.assoc,
    rw kernel.condition, rw has_zero_morphisms.zero_comp,
  end),

  refine ‚ü®u, ‚ü®v, ‚ü®hu‚ÇÅ.symm, hv‚ÇÅ.symm, exact_of_pseudo_exact _ _ ‚ü®_, _‚ü©‚ü©,
    Œª v', by rintro ‚ü®_, h, _‚ü©; exact hv‚ÇÇ _ h.symm‚ü©,
    Œª u', by rintro ‚ü®_, ‚ü®h, _‚ü©, _‚ü©; exact hu‚ÇÇ _ h.symm‚ü©,

  { intro a,
    apply zero_of_map_zero _ (pseudo_injective_of_mono (kernel.Œπ Œ≥)),
    calc (kernel.Œπ Œ≥ : kernel Œ≥ ‚ü∂ R) (v (u a))
          = (u ‚â´ v ‚â´ kernel.Œπ Œ≥) a : by rw [‚Üêcomp_apply, ‚Üêcomp_apply]
      ... = (u ‚â´ kernel.Œπ Œ≤ ‚â´ g) a : by rw hv‚ÇÅ
      ... = (kernel.Œπ Œ± ‚â´ f ‚â´ g) a : by rw [‚Üêcategory.assoc, hu‚ÇÅ, category.assoc]
      ... = (kernel.Œπ Œ± ‚â´ 0 : kernel Œ± ‚ü∂ R) a : by rw fg.1
      ... = 0 : by rw [has_zero_morphisms.comp_zero, zero_apply] },
  { intros b hb,

    have : g ((kernel.Œπ Œ≤ : kernel Œ≤ ‚ü∂ Q) b) = 0,
    calc g ((kernel.Œπ Œ≤ : kernel Œ≤ ‚ü∂ Q) b)
          = (kernel.Œπ Œ≥ : kernel Œ≥ ‚ü∂ R) (v b) : by rw [‚Üêcomp_apply, ‚Üêhv‚ÇÅ, comp_apply]
      ... = (kernel.Œπ Œ≥ : kernel Œ≥ ‚ü∂ R) 0 : by rw hb
      ... = 0 : apply_zero _,

    obtain ‚ü®a', ha'‚ü© := (pseudo_exact_of_exact fg).2 _ this,

    have : Œ± a' = 0,
    { apply zero_of_map_zero _ (pseudo_injective_of_mono f'),
      calc f' (Œ± a') = Œ≤ (f a') : by rw [‚Üêcomp_apply, comm‚ÇÅ, comp_apply]
      ... = Œ≤ ((kernel.Œπ Œ≤ : kernel Œ≤ ‚ü∂ Q) b) : by rw ha'
      ... = 0 : (pseudo_exact_of_exact (kernel_exact Œ≤)).1 _ },

    obtain ‚ü®a, ha‚ü© := (pseudo_exact_of_exact (kernel_exact Œ±)).2 _ this,

    use a,

    apply pseudo_injective_of_mono (kernel.Œπ Œ≤),
    calc (kernel.Œπ Œ≤ : kernel Œ≤ ‚Üí Q) (u a)
          = f ((kernel.Œπ Œ± : kernel Œ± ‚ü∂ P) a) : by rw [‚Üêcomp_apply, hu‚ÇÅ, comp_apply]
      ... = f a' : by rw ha
      ... = (kernel.Œπ Œ≤ : kernel Œ≤ ‚ü∂ Q) b : ha' }
end

end kernels

end

namespace kernels_full
variables {V : Type u} [ùí± : category.{v} V] [abelian.{v} V]
include ùí±

variables {A B C D E F G H I : V}
variables {Œ≥ : A ‚ü∂ D} {Œ¥ : B ‚ü∂ E} {Œµ : C ‚ü∂ F} {Œ∏ : D ‚ü∂ G} {l : E ‚ü∂ H} {Œº : F ‚ü∂ I}
variables {Œ∂ : D ‚ü∂ E} {Œ∑ : E ‚ü∂ F} {ŒΩ : G ‚ü∂ H} {Œæ : H ‚ü∂ I}
variables (comm‚ÇÅ : Œ∂ ‚â´ l = Œ∏ ‚â´ ŒΩ) (comm‚ÇÇ : Œ∑ ‚â´ Œº = l ‚â´ Œæ)
variables (Œ≥Œ∏ : exact Œ≥ Œ∏) (Œ¥l : exact Œ¥ l) (ŒµŒº : exact Œµ Œº)
variables (Œ∂Œ∑ : exact Œ∂ Œ∑) (ŒΩŒæ : exact ŒΩ Œæ)
include comm‚ÇÅ comm‚ÇÇ Œ≥Œ∏ Œ¥l ŒµŒº Œ∂Œ∑ ŒΩŒæ

def fill_left [mono Œ¥] : { x : A ‚ü∂ B // x ‚â´ Œ¥ = Œ≥ ‚â´ Œ∂ } :=
limit_kernel_fork.lift' _ (kernel_of_mono_exact _ _ Œ¥l) (Œ≥ ‚â´ Œ∂) $
  by rw [category.assoc, comm‚ÇÅ, ‚Üêcategory.assoc, Œ≥Œ∏.1, has_zero_morphisms.zero_comp]

def fill_right [mono Œµ] : { x : B ‚ü∂ C // x ‚â´ Œµ = Œ¥ ‚â´ Œ∑ } :=
limit_kernel_fork.lift' _ (kernel_of_mono_exact _ _ ŒµŒº) (Œ¥ ‚â´ Œ∑) $
  by rw [category.assoc, comm‚ÇÇ, ‚Üêcategory.assoc, Œ¥l.1, has_zero_morphisms.zero_comp]

variables {Œ± : A ‚ü∂ B} {Œ≤ : B ‚ü∂ C}
variables (comm‚ÇÉ : Œ± ‚â´ Œ¥ = Œ≥ ‚â´ Œ∂) (comm‚ÇÑ : Œ≤ ‚â´ Œµ = Œ¥ ‚â´ Œ∑)
include comm‚ÇÉ comm‚ÇÑ

lemma fill_left_unique [mono Œ¥] : Œ± = fill_left comm‚ÇÅ comm‚ÇÇ Œ≥Œ∏ Œ¥l ŒµŒº Œ∂Œ∑ ŒΩŒæ :=
begin
  apply (kernel_of_mono_exact _ _ Œ¥l).hom_ext,
  intro j,
  cases j,
  { erw (fill_left comm‚ÇÅ comm‚ÇÇ Œ≥Œ∏ Œ¥l ŒµŒº Œ∂Œ∑ ŒΩŒæ).2,
    erw comm‚ÇÉ },
  { simp only [kernel_fork.app_one],
    erw has_zero_morphisms.comp_zero,
    erw has_zero_morphisms.comp_zero }
end

lemma fill_right_unique [mono Œµ] : Œ≤ = fill_right comm‚ÇÅ comm‚ÇÇ Œ≥Œ∏ Œ¥l ŒµŒº Œ∂Œ∑ ŒΩŒæ :=
begin
  apply (kernel_of_mono_exact _ _ ŒµŒº).hom_ext,
  intro j,
  cases j,
  { erw (fill_right comm‚ÇÅ comm‚ÇÇ Œ≥Œ∏ Œ¥l ŒµŒº Œ∂Œ∑ ŒΩŒæ).2,
    erw comm‚ÇÑ },
  { simp only [kernel_fork.app_one],
    erw has_zero_morphisms.comp_zero,
    erw has_zero_morphisms.comp_zero }
end

lemma kernels [mono Œ¥] [mono Œµ] [mono ŒΩ] : exact Œ± Œ≤ :=
begin
  apply exact_of_pseudo_exact,
  split,
  { intro a,
    commutativity },
  { intros b hb,
    chase b using [Œ¥, Œ∂, Œ≥] with e d a,
    exact ‚ü®a, by commutativity‚ü© }
end

lemma kernels' [mono Œ¥] [mono Œµ] [mono ŒΩ] : exact Œ± Œ≤ :=
begin
  apply exact_of_pseudo_exact,
  split,

  { intro a,
    apply zero_of_map_zero _ (pseudo_injective_of_mono Œµ),
    calc Œµ (Œ≤ (Œ± a)) = (Œ± ‚â´ Œ≤ ‚â´ Œµ) a : by rw [‚Üêcomp_apply, ‚Üêcomp_apply]
      ... = (Œ± ‚â´ Œ¥ ‚â´ Œ∑) a : by rw comm‚ÇÑ
      ... = (Œ≥ ‚â´ Œ∂ ‚â´ Œ∑) a : by rw [‚Üêcategory.assoc, comm‚ÇÉ, category.assoc]
      ... = (Œ≥ ‚â´ (0 : D ‚ü∂ F)) a : by rw Œ∂Œ∑.1
      ... = 0 : by rw [has_zero_morphisms.comp_zero, zero_apply] },

  { intros b hb,

    have : Œ∑ (Œ¥ b) = 0,
    calc Œ∑ (Œ¥ b) = Œµ (Œ≤ b) : by rw [‚Üêcomp_apply, ‚Üêcomm‚ÇÑ, comp_apply]
      ... = Œµ 0 : by rw hb
      ... = 0 : apply_zero _,

    obtain ‚ü®d, hd‚ü© := (pseudo_exact_of_exact Œ∂Œ∑).2 _ this,

    have : Œ∏ d = 0,
    { apply zero_of_map_zero _ (pseudo_injective_of_mono ŒΩ),
      calc ŒΩ (Œ∏ d) = l (Œ∂ d) : by rw [‚Üêcomp_apply, ‚Üêcomm‚ÇÅ, comp_apply]
        ... = l (Œ¥ b) : by rw hd
        ... = 0 : (pseudo_exact_of_exact Œ¥l).1 _ },

    obtain ‚ü®a, ha‚ü© := (pseudo_exact_of_exact Œ≥Œ∏).2 _ this,

    use a,

    apply pseudo_injective_of_mono Œ¥,
    calc Œ¥ (Œ± a) = Œ∂ (Œ≥ a) : by rw [‚Üêcomp_apply, comm‚ÇÉ, comp_apply]
      ... = Œ∂ d : by rw ha
      ... = Œ¥ b : hd }
end

end kernels_full
