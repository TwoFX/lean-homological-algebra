import category_theory.limits.shapes.terminal category_theory.limits.shapes.equalizers

universes v u

open category_theory

namespace category_theory.limits

variables (C : Type u) [ùíû : category.{v} C] [has_terminal.{v} C] [has_initial.{v} C]
include ùíû


class has_zero_object :=
(terminal_eq_initial : (‚ä§_ C) = ‚ä•_ C)

abbreviation zero [has_zero_object.{v} C] : C := ‚ä§_ C

notation `_0` C:20 := zero C
--instance [has_zero_object.{v} C] : has_zero C := ‚ü®‚ä§_ C‚ü©

section
variables {C}

abbreviation zero.from [has_zero_object.{v} C] (P : C) : P ‚ü∂ _0 C := terminal.from P
abbreviation zero.to [has_zero_object.{v} C] (P : C) : _0 C ‚ü∂ P :=
by { delta zero, rw has_zero_object.terminal_eq_initial.{v} C, exact initial.to P }

instance unique_to_zero [has_zero_object.{v} C] (P : C) : unique (P ‚ü∂ _0 C) :=
by { delta zero, exact limits.unique_to_terminal P }

instance unique_from_zero [has_zero_object.{v} C] (P : C) : unique (_0 C ‚ü∂ P) :=
by { delta zero, rw has_zero_object.terminal_eq_initial.{v} C, exact limits.unique_from_initial P }

abbreviation zero_mor [has_zero_object.{v} C] (P : C) (Q : C) : P ‚ü∂ Q :=
(zero.from P) ‚â´ (zero.to Q)

instance morphisms.have_zero [has_zero_object.{v} C] {P Q : C} : has_zero (P ‚ü∂ Q) := ‚ü®zero_mor P Q‚ü©
--notation P ` ‚ü∂‚ÇÄ ` Q:10 := zero_mor P Q

/- Borceux 2, Prop. 1.1.4 -/
@[simp] lemma zero_comp [has_zero_object.{v} C] {P Q R : C} (g : Q ‚ü∂ R) : (0 : P ‚ü∂ Q) ‚â´ g = 0 :=
begin
  unfold has_zero.zero,
  rw category.assoc',
  rw (limits.unique_from_zero R).uniq (zero.to Q ‚â´ g),
  delta zero_mor,
  rw (limits.unique_from_zero R).uniq (zero.to R)
end

/- Borceux 2, Prop. 1.1.4 -/
@[simp] lemma comp_zero [has_zero_object.{v} C] {P Q R : C} (f : P ‚ü∂ Q) : f ‚â´ (0 : Q ‚ü∂ R) = 0 :=
begin
  unfold has_zero.zero,
  rw ‚Üêcategory.assoc',
  rw (limits.unique_to_zero P).uniq (f ‚â´ zero.from Q),
  delta zero_mor,
  rw (limits.unique_to_zero P).uniq (zero.from P)
end

/- Borceux 2, Prop 1.1.6 -/
lemma zero_comp' [has_zero_object.{v} C] {P Q R : C} {f : P ‚ü∂ Q} {g : Q ‚ü∂ R} [mono g] (h : f ‚â´ g = 0) : f = 0 :=
by { rw [‚Üêzero_comp g, cancel_mono g] at h, exact h }

section kernel
variables {P Q : C} (f : P ‚ü∂ Q) [has_zero_object.{v} C] [has_limit (parallel_pair f 0)]

/- Borceux 2, Def. 1.1.5 -/
abbreviation ker := equalizer f 0
abbreviation ker.Œπ := equalizer.Œπ f 0

lemma fork_comm {P Q : C} {f g : P ‚ü∂ Q} (s : fork f g) :
    (fork.Œπ s ‚â´ f) = (s.œÄ.app walking_parallel_pair.one) :=
by convert @cone.w _ _ _ _ _ s _ _ walking_parallel_pair_hom.left

lemma fork_comm' {P Q : C} {f g : P ‚ü∂ Q} (s : fork f g) :
    (fork.Œπ s ‚â´ g) = (s.œÄ.app walking_parallel_pair.one) :=
by convert @cone.w _ _ _ _ _ s _ _ walking_parallel_pair_hom.right

/- Borceux 2, Prop 1.1.7 -/
lemma ker_eq_zero [mono f] : ker f ‚âÖ _0 C :=
begin
  let zero_cone : cone (parallel_pair f 0) := { X := _0 C, œÄ := { app := Œª X, 0 }, },
  suffices : is_limit zero_cone,
  begin
    have := functor.map_iso cones.forget (is_limit.unique_up_to_iso (limit.is_limit (parallel_pair f 0)) this),
    simp only [cones.forget_obj] at this,
    exact this,
  end,
  exact {
    lift := Œª s, 0,
    fac' := begin
      intros s j,
      rw zero_comp,
      let s' : fork f 0 := s,
      have : s = s', by refl,
      rw this,
      cases j,
      begin
        refine (@zero_comp' _ _ _ _ _ _ _ _ _ f _ _).symm,
        have : (s'.œÄ).app limits.walking_parallel_pair.zero = fork.Œπ s', by refl,
        rw this,
        rw fork.condition,
        convert comp_zero (limits.fork.Œπ s'),
      end,
      begin
        rw ‚Üêfork_comm' s',
        convert (comp_zero (limits.fork.Œπ s')).symm,
      end
    end,
    uniq' := begin
      intros, have t : unique (s.X ‚ü∂ _0 C), by apply_instance,
      have u := t.uniq m,
      have v := t.uniq 0,
      cc,
    end
  }
end

lemma ker_eq_id [has_limit (parallel_pair (0 : P ‚ü∂ Q) 0)] : ker (0 : P ‚ü∂ Q) ‚âÖ P :=
begin
  let id_fork : fork (0 : P ‚ü∂ Q) 0 := fork.of_Œπ (ùüô P) (by simp),
  suffices : is_limit id_fork,
  begin
    have := functor.map_iso cones.forget (is_limit.unique_up_to_iso (limit.is_limit (parallel_pair 0 0)) this),
    simp only [cones.forget_obj] at this,
    exact this,
  end,
  exact {
    lift := Œª s, by convert s.œÄ.app limits.walking_parallel_pair.zero,
    fac' := begin
      intros s j,
      cases j,
      simp only [fork.of_Œπ_app_zero, comp_zero],
    end
  }
end
end kernel



end
end category_theory.limits