/-
Copyright (c) 2020 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/

import category_theory.category
import abelian

open category_theory
open category_theory.limits

universes v u

namespace category_theory.abelian

section
variables {C : Type u} [ùíû : category.{v} C] [abelian.{v} C]
include ùíû

def exact {P Q R : C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) : Prop :=
f ‚â´ g = 0 ‚àß kernel.Œπ g ‚â´ cokernel.œÄ f = 0

def exact_fork {P Q R : C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) (e : exact f g) : kernel_fork g :=
kernel_fork.of_Œπ (kernel.Œπ (cokernel.œÄ f)) $
  (preadditive.cancel_zero_iff_epi (factor_thru_image f)).1
    (by apply_instance) _ (kernel.Œπ (cokernel.œÄ f) ‚â´ g) $
    by rw [‚Üêcategory.assoc, image.fac f, e.1]

def exact_ker {P Q R : C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) (e : exact f g) : is_limit $ exact_fork f g e :=
fork.is_limit.mk _
  (Œª s, kernel.lift _ (fork.Œπ s)
  begin
    let t : s.X ‚ü∂ kernel g := kernel.lift g (fork.Œπ s) (kernel_fork.condition _),
    have : t ‚â´ kernel.Œπ g = fork.Œπ s := by erw limit.lift_œÄ; refl,
    rw [‚Üêthis, category.assoc, e.2, has_zero_morphisms.comp_zero]
  end)
  (Œª s, by erw limit.lift_œÄ; refl)
  (Œª s m h, by ext; erw [h walking_parallel_pair.zero, limit.lift_œÄ]; refl)

def exact_cofork {P Q R : C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) (e : exact f g) : cokernel_cofork f :=
cokernel_cofork.of_œÄ (cokernel.œÄ (kernel.Œπ g)) $
  (preadditive.cancel_zero_iff_mono (factor_thru_coimage g)).1
    (by apply_instance) _ (f ‚â´ cokernel.œÄ (kernel.Œπ g)) $
    by rw [category.assoc, coimage.fac g, e.1]

def exact_coker {P Q R : C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) (e : exact f g) :
  is_colimit $ exact_cofork f g e :=
cofork.is_colimit.mk _
  (Œª s, cokernel.desc _ (cofork.œÄ s)
  begin
    let t : cokernel f ‚ü∂ s.X := cokernel.desc f (cofork.œÄ s) (cokernel_cofork.condition _),
    have : cokernel.œÄ f ‚â´ t = cofork.œÄ s := by erw colimit.Œπ_desc; refl,
    rw [‚Üêthis, ‚Üêcategory.assoc, e.2, has_zero_morphisms.zero_comp]
  end)
  (Œª s, by erw colimit.Œπ_desc; refl)
  (Œª s m h, by ext; erw [h walking_parallel_pair.one, colimit.Œπ_desc]; refl)

lemma exact_zero_of_mono (P : C) {Q R : C} (f : Q ‚ü∂ R) [mono f] : exact (0 : P ‚ü∂ Q) f :=
‚ü®has_zero_morphisms.zero_comp _ _ _,
begin
  rw (preadditive.cancel_zero_iff_mono f).1 (by apply_instance) _ (kernel.Œπ f) (kernel.condition _),
  exact has_zero_morphisms.zero_comp _ _ _,
end‚ü©

lemma mono_of_exact_zero (P : C) {Q R : C} (f : Q ‚ü∂ R) (h : exact (0 : P ‚ü∂ Q) f) : mono f :=
(preadditive.cancel_zero_iff_mono f).2 $ Œª Z g h‚ÇÄ,
begin
  obtain ‚ü®k, hk‚ü© := limit_kernel_fork.lift' f (exact_ker _ _ h) g h‚ÇÄ,
  have := (preadditive.cancel_zero_iff_epi (factor_thru_image (0 : P ‚ü∂ Q))).1
    (by apply_instance) _ _ (image.fac (0 : P ‚ü∂ Q)),
  change k ‚â´ kernel.Œπ (cokernel.œÄ (0 : P ‚ü∂ Q)) = g at hk,
  rw ‚Üêhk,
  conv_lhs { congr, skip, rw this },
  exact has_zero_morphisms.comp_zero _ _ _,
end

lemma exact_zero_of_epi {P Q : C} (f : P ‚ü∂ Q) (R : C) [epi f] : exact f (0 : Q ‚ü∂ R) :=
‚ü®has_zero_morphisms.comp_zero _ _ _,
begin
  rw (preadditive.cancel_zero_iff_epi f).1 (by apply_instance) _ (cokernel.œÄ f) (cokernel.condition _),
  exact has_zero_morphisms.comp_zero _ _ _,
end‚ü©

lemma epi_of_exact_zero {P Q : C} (f : P ‚ü∂ Q) (R : C) (h : exact f (0 : Q ‚ü∂ R)) : epi f :=
(preadditive.cancel_zero_iff_epi f).2 $ Œª Z g h‚ÇÄ,
begin
  obtain ‚ü®k, hk‚ü© := cokernel.desc' f g h‚ÇÄ,
  haveI : is_iso (kernel.Œπ (0 : Q ‚ü∂ R)) := kernel.Œπ_of_zero _ _,
  apply (preadditive.cancel_zero_iff_epi (kernel.Œπ (0 : Q ‚ü∂ R))).1 (by apply_instance) _ _,
  rw [‚Üêhk, ‚Üêcategory.assoc, h.2],
  exact has_zero_morphisms.zero_comp _ _ _,
end

lemma kernel_exact {P Q : C} (f : P ‚ü∂ Q) : exact (kernel.Œπ f) f :=
‚ü®kernel.condition _, cokernel.condition _‚ü©

lemma cokernel_exact {P Q : C} (f : P ‚ü∂ Q) : exact f (cokernel.œÄ f) :=
‚ü®cokernel.condition _, kernel.condition _‚ü©

def kernel_of_mono_exact {P Q R : C} (f : P ‚ü∂ Q) [mono f] (g : Q ‚ü∂ R) (h : exact f g) :
  is_limit $ kernel_fork.of_Œπ f h.1 :=
begin
  let I := kernel (cokernel.œÄ f),
  let i : kernel g ‚âÖ I := functor.map_iso (cones.forget _)
    (is_limit.unique_up_to_iso (limit.is_limit _) (exact_ker f g h)),
  have h‚ÇÄ : i.hom ‚â´ kernel.Œπ (cokernel.œÄ f) = kernel.Œπ g :=
    cone_morphism.w (is_limit.unique_up_to_iso (limit.is_limit _) (exact_ker f g h)).hom
      walking_parallel_pair.zero,
  haveI : mono (factor_thru_image f) := mono_of_mono_fac (image.fac f),
  haveI : is_iso (factor_thru_image f) := mono_epi_iso _,
  let j : P ‚âÖ I := as_iso (factor_thru_image f),
  apply kernel.transport _ _ (j ‚â™‚â´ i.symm),
  erw [category.assoc, ‚Üê(iso.eq_inv_comp i).2 h‚ÇÄ, image.fac],
end

def cokernel_of_epi_exact {P Q R : C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) [epi g] (h : exact f g) :
  is_colimit $ cokernel_cofork.of_œÄ g h.1 :=
begin
  let I := cokernel (kernel.Œπ g),
  let i : cokernel f ‚âÖ I := functor.map_iso (cocones.forget _)
    (is_colimit.unique_up_to_iso (colimit.is_colimit _) (exact_coker f g h)),
  have h‚ÇÄ : cokernel.œÄ f ‚â´ i.hom = cokernel.œÄ (kernel.Œπ g) :=
    cocone_morphism.w (is_colimit.unique_up_to_iso (colimit.is_colimit _) (exact_coker f g h)).hom
      walking_parallel_pair.one,
  haveI : epi (factor_thru_coimage g) := epi_of_epi_fac (coimage.fac g),
  haveI : is_iso (factor_thru_coimage g) := mono_epi_iso _,
  let j : I ‚âÖ R := as_iso (factor_thru_coimage g),
  apply cokernel.transport' _ _ (i ‚â™‚â´ j),
  erw [‚Üêcategory.assoc, h‚ÇÄ, coimage.fac],
end

end

end category_theory.abelian
